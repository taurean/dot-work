---
import Head from "../components/Head.astro";
import Layout from "../layouts/Layout.astro";
import type { definition, footnote } from "../util/types";

// src/components/DefinitionsList.astro
import { definitions } from "../data/definitions";

const shuffleArray = (originalArray: definition[]) => {
    const shuffledArray = structuredClone(originalArray);
    for (
        let currentIndex = shuffledArray.length - 1;
        currentIndex > 0;
        currentIndex--
    ) {
        const randomIndex = Math.floor(Math.random() * (currentIndex + 1));
        [shuffledArray[currentIndex], shuffledArray[randomIndex]] = [
            shuffledArray[randomIndex],
            shuffledArray[currentIndex],
        ];
    }
    return shuffledArray;
};

// Randomize definitions - different order for each page request
const randomizedDefinitions = shuffleArray(definitions);

// Process footnotes after randomization
const footnoteRegistry = new Map();
const orderedFootnoteList: any[] = [];

// Build the footnote mapping and list from randomized definitions
randomizedDefinitions.forEach((definition: definition) => {
    definition.footnotes.forEach((footnote: footnote) => {
        if (!footnoteRegistry.has(footnote.id)) {
            const footnoteWithIndex = {
                ...footnote,
                index: orderedFootnoteList.length + 1,
            };
            footnoteRegistry.set(footnote.id, footnoteWithIndex);
            orderedFootnoteList.push(footnoteWithIndex);
        }
    });
});

// Process content to replace footnote placeholders
function processContent(content: any) {
    return content.replace(
        /\[\[([^:]+?)(?::([^:]+?))?\]\]/g,
        (match: any, textOrId: any, possibleId: any) => {
            if (possibleId) {
                const footnoteInfo = footnoteRegistry.get(possibleId);
                if (footnoteInfo) {
                    return `${textOrId}<sup><a href="#${possibleId}">${footnoteInfo.index}</a></sup>`;
                }
                return textOrId;
            } else {
                const id = textOrId;
                const footnoteInfo = footnoteRegistry.get(id);
                if (footnoteInfo) {
                    return `${id}<sup><a href="#${id}">${footnoteInfo.index}</a></sup>`;
                }
                return id;
            }
        },
    );
}

// Pre-process all definition content on the server
const processedDefinitions = randomizedDefinitions.map((definition) => ({
    ...definition,
    processedContent: processContent(definition.content),
}));
---

<!doctype html>
<html lang="en">
    <Head title="taurean" />
    <body>
        <header>
            <div>
                <h1>Taurean C. Bryant</h1>
                <span>noun</span>
                <button>Pronounce tor-ee-ehn</button>
            </div>
            <a href="/now">What's new</a>
        </header>
        <main>
            <h2>definition</h2>
            <ul>
                {
                    processedDefinitions.map((definition) => (
                        <li>
                            <p set:html={definition.processedContent} />
                        </li>
                    ))
                }
            </ul>
            <div>…some other content here…</div>
        </main>

        <footer>
            <ol>
                {
                    orderedFootnoteList.map((footnote) => (
                        <li id={footnote.id}>
                            <a
                                href={footnote.linkUrl || "#"}
                                target={
                                    footnote.openInNewTab ? "_blank" : "_self"
                                }
                                rel={
                                    footnote.openInNewTab
                                        ? "noopener noreferrer"
                                        : ""
                                }
                            >
                                <span class="footnoteCount">
                                    {footnote.index}
                                </span>{" "}
                                {footnote.linkTitle}
                            </a>
                            <p>{footnote.linkDescription}</p>
                        </li>
                    ))
                }
            </ol>
        </footer>
    </body>
</html>

<style></style>
