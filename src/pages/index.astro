---
import Head from "../components/Head.astro";
import Layout from "../layouts/Layout.astro";

// src/components/DefinitionsList.astro
import { Definitions } from "../data/definitions";

// ===== SERVER-SIDE PROCESSING =====
// All of this code runs on the server ONLY
// None of this JavaScript is sent to the client

// Function to shuffle array - executes on the server for each request
function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// Randomize definitions - different order for each page request
const randomizedDefinitions = shuffleArray(Definitions);

// Process footnotes after randomization
const allFootnotesMap = new Map();
const allFootnotesList = [];

// Build the footnote mapping and list from randomized definitions
randomizedDefinitions.forEach((def) => {
    def.footnotes.forEach((footnote) => {
        if (!allFootnotesMap.has(footnote.id)) {
            const footnoteWithIndex = {
                ...footnote,
                index: allFootnotesList.length + 1,
            };
            allFootnotesMap.set(footnote.id, footnoteWithIndex);
            allFootnotesList.push(footnoteWithIndex);
        }
    });
});

// Process content to replace footnote placeholders
function processContent(content) {
    return content.replace(
        /\[\[([^:]+?)(?::([^:]+?))?\]\]/g,
        (match, textOrId, possibleId) => {
            if (possibleId) {
                const footnoteInfo = allFootnotesMap.get(possibleId);
                if (footnoteInfo) {
                    return `${textOrId}<sup><a href="#${possibleId}">${footnoteInfo.index}</a></sup>`;
                }
                return textOrId;
            } else {
                const id = textOrId;
                const footnoteInfo = allFootnotesMap.get(id);
                if (footnoteInfo) {
                    return `${id}<sup><a href="#${id}">${footnoteInfo.index}</a></sup>`;
                }
                return id;
            }
        },
    );
}

// Pre-process all definition content on the server
const processedDefinitions = randomizedDefinitions.map((def) => ({
    ...def,
    processedContent: processContent(def.content),
}));
---

<Layout>
    <main>
        <h2>definition</h2>
        <ul>
            {
                processedDefinitions.map((definition) => (
                    <li>
                        <p set:html={definition.processedContent} />
                    </li>
                ))
            }
        </ul>
        <div>…some other content here…</div>
    </main>

    <footer>
        <ol>
            {
                allFootnotesList.map((footnote) => (
                    <li id={footnote.id}>
                        <a
                            href={footnote.linkUrl || "#"}
                            target={footnote.openInNewTab ? "_blank" : "_self"}
                            rel={
                                footnote.openInNewTab
                                    ? "noopener noreferrer"
                                    : ""
                            }
                        >
                            <span class="footnoteCount">{footnote.index}</span>{" "}
                            {footnote.linkTitle}
                        </a>
                        <p>{footnote.linkDescription}</p>
                    </li>
                ))
            }
        </ol>
    </footer>
</Layout>
