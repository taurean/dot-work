---
import Head from "../components/Head.astro";
import { PronounceGuide } from "../components/PronounceGuide";
import Footer from "../components/Footer.astro";
import Layout from "../layouts/Layout.astro";
import { shuffleArray } from "../util/function";
import type { definition, footnote } from "../util/types";

// src/components/DefinitionsList.astro
import { definitions } from "../data/definitions";

// Randomize definitions - different order for each page request
const randomizedDefinitions = shuffleArray(definitions);

// Process footnotes after randomization
const footnoteRegistry = new Map();
const orderedFootnoteList: any[] = [];

// Build the footnote mapping and list from randomized definitions
randomizedDefinitions.forEach((definition: definition) => {
    definition.footnotes.forEach((footnote: footnote) => {
        if (!footnoteRegistry.has(footnote.id)) {
            const footnoteWithIndex = {
                ...footnote,
                index: orderedFootnoteList.length + 1,
            };
            footnoteRegistry.set(footnote.id, footnoteWithIndex);
            orderedFootnoteList.push(footnoteWithIndex);
        }
    });
});

// Process content to replace footnote placeholders
function processContent(content: any) {
    return content.replace(
        /\[\[([^:]+?)(?::([^:]+?))?\]\]/g,
        (match: any, textOrId: any, possibleId: any) => {
            if (possibleId) {
                const footnoteInfo = footnoteRegistry.get(possibleId);
                if (footnoteInfo) {
                    return `${textOrId}<sup><a href="#${possibleId}">${footnoteInfo.index}</a></sup>`;
                }
                return textOrId;
            } else {
                const id = textOrId;
                const footnoteInfo = footnoteRegistry.get(id);
                if (footnoteInfo) {
                    return `${id}<sup><a href="#${id}">${footnoteInfo.index}</a></sup>`;
                }
                return id;
            }
        },
    );
}

// Pre-process all definition content on the server
const processedDefinitions = randomizedDefinitions.map((definition) => ({
    ...definition,
    processedContent: processContent(definition.content),
}));
---

<Layout type="profile">
    <nav><p><a href="/cv">Hiring? check out my cv & portfolio </a></p></nav>
    <header>
        <div>
            <h1>Taurean C. Bryant</h1>
            <span>noun</span>
            <PronounceGuide client:load />
        </div>
        <a href="/now">What's new</a>
    </header>
    <main>
        <section>
            <h2>definition</h2>
            <ol>
                {
                    processedDefinitions.map((definition) => (
                        <li>
                            <p set:html={definition.processedContent} />
                        </li>
                    ))
                }
            </ol>
        </section>
        <section>
            <h2>usage</h2>
            <ul>
                <li></li>
            </ul>
        </section>
        <section>
            <h2>Etymology</h2>
            <dl>
                <dt><strong>tau</strong></dt>
                <dd>Meaning “lion” in Twana and Sotho.</dd>
                <dt><strong>ean</strong></dt>
                <dd>
                    A common suffix to names in Armenian, translating to “son
                    of”.
                </dd>
            </dl>
            <p>
                Bringing them together as “son of lions”, alluding to my parents
                who share the astrology Leo sign. (I think the “r” in the middle
                just made the name pronounceable.)
            </p>
        </section>
    </main>

    <footer>
        <section>
            <ol class="footnotes">
                {
                    orderedFootnoteList.map((footnote) => (
                        <li>
                            <a
                                id={footnote.id}
                                href={footnote.linkUrl || "#"}
                                target={
                                    footnote.openInNewTab ? "_blank" : "_self"
                                }
                                rel={
                                    footnote.openInNewTab
                                        ? "noopener noreferrer"
                                        : ""
                                }
                                aria-describedby={`${footnote.id}-descriptor`}
                            >
                                <span class="footnoteCount" aria-hidden="true">
                                    {footnote.index}
                                </span>{" "}
                                {footnote.linkTitle}
                            </a>
                            <p id={`${footnote.id}-descriptor`}>
                                {footnote.linkDescription}
                            </p>
                        </li>
                    ))
                }
            </ol>
        </section>
        <Footer />
    </footer>
</Layout>

<style>
    .footnotes {
        list-style-type: none;
        padding-inline-start: 0;
    }
</style>
